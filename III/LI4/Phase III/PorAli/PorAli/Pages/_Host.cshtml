@page "/"
@namespace PorAli.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PorAli</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="_content/Blazored.Toast/blazored-toast.min.css" rel="stylesheet" />
    <link href="_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />

    <script src="_content/Blazored.Modal/blazored.modal.js"></script>

    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>

</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBF98jX9qVO-bB8pr-x6GIo9TGTDXqR3Go&v=3&callback=initMap&libraries=&v=weekly"></script>
    <script>
        function initMap(val) {
            const markerArray = [];
            // Instantiate a directions service.
            const directionsService = new google.maps.DirectionsService();
            // Create a map and center it on Manhattan.
            const map = new google.maps.Map(document.getElementById("map"), {
                zoom: 13,
                center: { lat: 40.771, lng: -73.974 },
            });
            // Create a renderer for directions and bind it to the map.
            const directionsRenderer = new google.maps.DirectionsRenderer({ map: map });
            // Instantiate an info window to hold step text.
            const stepDisplay = new google.maps.InfoWindow();
            // Display the route between the initial start and end selections.
            calculateAndDisplayRoute(
                directionsRenderer,
                directionsService,
                markerArray,
                stepDisplay,
                map,
                val
            );

            // Listen to change events from the start and end lists.
            const onChangeHandler = function () {
                calculateAndDisplayRoute(
                    directionsRenderer,
                    directionsService,
                    markerArray,
                    stepDisplay,
                    map,
                    val
                );
            };
            document.getElementById("start").addEventListener("change", onChangeHandler);
            document.getElementById("end").addEventListener("change", onChangeHandler);
        }

        function calculateAndDisplayRoute(
            directionsRenderer,
            directionsService,
            markerArray,
            stepDisplay,
            map,
            val
        ) {
            // First, remove any existing markers from the map.
            for (let i = 0; i < markerArray.length; i++) {
                markerArray[i].setMap(null);
            }
            // Retrieve the start and end locations and create a DirectionsRequest using
            // WALKING directions.
            directionsService.route(
                {
                    origin: document.getElementById("start").value,
                    destination: document.getElementById("end").value,
                    provideRouteAlternatives: true,
                    travelMode: google.maps.TravelMode.TRANSIT,
                },
                function (result, status) {
                    // Route the directions and pass the response to a function to create
                    // markers for each step.
                    if (status === "OK" && result) {
                        for (var i = 0; i < result.routes.length; i++) {
                            var dr = new google.maps.DirectionsRenderer();
                            dr.setDirections(result);
                            // Tell the DirectionsRenderer which route to display
                            dr.setRouteIndex(i);
                            if (val == i) dr.setMap(map);
                        }

                    }
                }
            );

            directionsRenderer.setMap(map);
            //if (val > 0) directionsRenderer.setRouteIndex(val);

        }

        function showSteps(directionResult, markerArray, stepDisplay, map) {
            // For each step, place a marker, and add the text to the marker's infowindow.
            // Also attach the marker to an array so we can keep track of it and remove it
            // when calculating new routes.
            const myRoute = directionResult.routes[0].legs[0];

            for (let i = 0; i < myRoute.steps.length; i++) {
                const marker = (markerArray[i] =
                    markerArray[i] || new google.maps.Marker());
                marker.setMap(map);
                marker.setPosition(myRoute.steps[i].start_location);
                attachInstructionText(
                    stepDisplay,
                    marker,
                    myRoute.steps[i].instructions,
                    map
                );
            }
        }

        function attachInstructionText(stepDisplay, marker, text, map) {
            google.maps.event.addListener(marker, "click", () => {
                // Open an info window when the marker is clicked on, containing the text
                // of the step.
                stepDisplay.setContent(text);
                stepDisplay.open(map, marker);
            });
        }
    </script>




</body>
</html>
